package com.wtshop.model;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.wtshop.entity.ProductImage;
import com.wtshop.model.base.BaseFuDai;
import com.wtshop.util.ObjectUtils;
import org.apache.commons.collections.CollectionUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class FuDai extends BaseFuDai<FuDai> {
    public static final FuDai dao = new FuDai().dao();
    //福袋主产品
    private FudaiProduct fudaiProduct;
    //  福袋状态    0/已发布,1/未发布
    public final static int State_Active = 0;
    public final static int State_UnActive = 1;

    public FudaiProduct getFudaiProduct() {
        if (ObjectUtils.isEmpty(fudaiProduct)) {
            String sql = "select * from fudai_product where is_main=1 and fudai_id=" + getId();
            fudaiProduct = FudaiProduct.dao.findFirst(sql);
        }
        return fudaiProduct;
    }

    public void setFudaiProduct(FudaiProduct fudaiProduct) {
        this.fudaiProduct = fudaiProduct;
    }

    /**
     * 设置商品图片
     *
     * @param productImages
     *            商品图片
     */
    /**
     * 商品图片
     */
    private List<ProductImage> productImages = new ArrayList<ProductImage>();

    public void setProductImagesConverter(List<ProductImage> productImages) {
        this.productImages = productImages;
    }

    /**
     * 获取商品图片
     *
     * @return 商品图片
     */
    public List<ProductImage> getProductImagesConverter() {
        if (CollectionUtils.isEmpty(productImages)) {
            JSONArray productImageArrays = JSONArray.parseArray(getProductImages());
            if (CollectionUtils.isNotEmpty(productImageArrays)) {
                for (int i = 0; i < productImageArrays.size(); i++) {
                    productImages.add(JSONObject.parseObject(productImageArrays.getString(i), ProductImage.class));
                }
            }
        }
        return productImages;
    }


    /**
     * 获取缩略图
     *
     * @return 缩略图
     */
    public String getThumbnail() {
        if (CollectionUtils.isEmpty(getProductImagesConverter())) {
            return null;
        }
        return getProductImagesConverter().get(0).getThumbnail();
    }

}
